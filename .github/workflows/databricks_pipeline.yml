name: databricks-pipeline

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

concurrency:
  group: databricks-worldbank-pipeline
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      job_id: ${{ steps.tfout.outputs.job_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          TF_VAR_repo_url: ${{ vars.TF_VAR_repo_url }}
          TF_VAR_repo_branch: ${{ vars.TF_VAR_repo_branch }}
          TF_VAR_cron_time_bogota: ${{ vars.TF_VAR_cron_time_bogota }}
        run: terraform apply -auto-approve

      - name: Export Outputs
        id: tfout
        working-directory: terraform
        run: |
          echo "job_id=$(terraform output -raw job_id)" >> "$GITHUB_OUTPUT"

  run-job:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          databricks -v

      - name: Run Job Now (secuencial dentro del job)
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          JOB_ID='${{ needs.terraform.outputs.job_id }}'
          if [ -z "$JOB_ID" ]; then
            echo "JOB_ID vac√≠o. Revisa el job 'terraform' y sus outputs."
            exit 1
          fi
          # 'run-now' espera el id como argumento POSICIONAL (no --job-id)
          databricks jobs run-now "$JOB_ID" --wait
